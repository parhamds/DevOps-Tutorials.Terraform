5. What are Day 0 and Day 1 activities?

IaC can be applied throughout the lifecycle, both on the initial build, as well as throughout the life of the infrastructure. Commonly, these are referred to as Day 0 and Day 1 activities.

“Day 0” code provisions and configures your initial infrastructure.

“Day 1” refers to OS and application configurations you apply after you’ve initially built your infrastructure.


18. How do you install terraform on different OS?

// Mac OS

brew install terraform

// Windows

choco install terraform

https://learn.hashicorp.com/terraform/getting-started/install


9. How do you manually install terraform?

step 1: Download the zip fille

step 2: mv ~/Downloads/terraform /usr/local/bin/terraform


21. Only constants are allowed inside the terraform block. Is this correct?

Yes

Within a terraform block, only constant values can be used; arguments may not refer to named objects such as resources, input variables, etc, and may not use any of the Terraform language built-in functions.


24. What are the meta-arguments that are defined by Terraform itself and available for all provider blocks?

version: Constraining the allowed provider versions

alias: using the same provider with different configurations for different resources


29. How do you upgrade to the latest acceptable version of the provider?

terraform init --upgrade

It upgrade to the latest acceptable version of each provider

This command also upgrades to the latest versions of all Terraform modules.




30. How many ways you can configure provider versions?

1. With required_providers blocks under terraform block

terraform {

  required_providers {

    aws = "~> 1.0"

  }

}

2. Provider version constraints can also be specified using a version argument within a provider block

provider {

  version= "1.0"

}



31. How do you configure Multiple Provider Instances?

alias

You can optionally define multiple configurations for the same provider, and select which one to use on a per-resource or per-module basis.


35. What is the location of the user plugins directory?

Windows %APPDATA%\terraform.d\plugins

All other systems ~/.terraform.d/plugins



36. Third-party plugins should be manually installed. Is that true?

True


38. What is the naming scheme for provider plugins?

terraform-provider-<NAME>_vX.Y.Z


39. What is the CLI configuration File?

The CLI configuration file configures per-user settings for CLI behaviors, which apply across all Terraform working directories.

It is named either .terraformrc or terraform.rc


40. Where is the location of the CLI configuration File?

On Windows, the file must be named terraform.rc and placed in the relevant user's %APPDATA% directory.

On all other systems, the file must be named .terraformrc (note the leading period) and placed directly in the home directory of the relevant user.

The location of the Terraform CLI configuration file can also be specified using the TF_CLI_CONFIG_FILE environment variable.


41. What is Provider Plugin Cache?

By default, terraform init downloads plugins into a subdirectory of the working directory so that each working directory is self-contained. As a consequence, if you have multiple configurations that use the same provider then a separate copy of its plugin will be downloaded for each configuration.

Given that provider plugins can be quite large (on the order of hundreds of megabytes), this default behavior can be inconvenient for those with slow or metered Internet connections.

Therefore Terraform optionally allows the use of a local directory as a shared plugin cache, which then allows each distinct plugin binary to be downloaded only once.


42. How do you enable Provider Plugin Cache?

To enable the plugin cache, use the plugin_cache_dir setting in the CLI configuration file.

plugin_cache_dir = "$HOME/.terraform.d/plugin-cache"

Alternatively, the TF_PLUGIN_CACHE_DIR environment variable can be used to enable caching or to override an existing cache directory within a particular shell session.


43. When you are using plugin cache you end up growing cache directory with different versions. Whose responsibility to clean it?

User

Terraform will never itself delete a plugin from the plugin cache once it's been placed there. Over time, as plugins are upgraded, the cache directory may grow to contain several unused versions which must be manually deleted.



47. If different teams are working on the same configuration. How do you make files to have syntactically valid and internally consistent?

terraform validate

This command will check and report errors within modules, attribute names, and value types.

Validate your configuration. If your configuration is valid, Terraform will return a success message.



50. How do you inspect the current state of the infrastructure applied?

terraform show

When you applied your configuration, Terraform wrote data into a file called terraform.tfstate. This file now contains the IDs and properties of the resources Terraform created so that it can manage or destroy those resources going forward.




51. If your state file is too big and you want to list the resources from your state. What is the command?

terraform state list


59. What do we need to use a remote-exec?

In order to use a remote-exec provisioner, you must choose an ssh or winrm connection in the form of a connection block within the provisioner.


65. By default, provisioners that fail will also cause the Terraform apply itself to fail. Is this true?

True


67. How do you define destroy provisioner and give an example?

You can define destroy provisioner with the parameter when

provisioner "remote-exec" {

    when = "destroy"

    # <...snip...>

}



68. How do you apply constraints for the provider versions?

The required_providers setting is a map specifying a version constraint for each provider required by your configuration.

terraform {

  required_providers {

    aws = ">= 2.7.0"

  }

}


70. How do you try experimental features?

In releases where experimental features are available, you can enable them on a per-module basis by setting the experiments argument inside a terraform block:

terraform {

  experiments = [example]

}


72. Expressions in provisioner blocks cannot refer to their parent resource by name. Is this true?

True

The self-object represents the provisioner's parent resource and has all of that resource's attributes.

For example, use self.public_ip to reference an aws_instance's public_ip attribute.


73. What does this symbol version = “~> 1.0” mean when defining versions?

Any version more than 1.0 and less than 2.0


75. Terraform assumes an empty default configuration for any provider that is not explicitly configured. A provider block can be empty. Is this true?

True


76. How do you configure the required version of Terraform CLI can be used with your configuration?

The required_version setting can be used to constrain which versions of the Terraform CLI can be used with your configuration. If the running version of Terraform doesn't match the constraints specified, Terraform will produce an error and exit without taking any further actions.


77. Terraform CLI versions and provider versions are independent of each other. Is this true?

True


79. You are provisioning the infrastructure with the command terraform apply and you noticed one of the resources failed. How do you remove that resource without affecting the whole infrastructure?

You can taint the resource ans the next apply will destroy the resource

terraform taint <resource.id>


83. By default, fmt scans the current directory for configuration files. Is this true?

True

By default, fmt scans the current directory for configuration files. If the dir argument is provided then it will scan that given directory instead. If dir is a single dash (-) then fmt will read from standard input (STDIN).


84. You are formatting the configuration files and what is the flag you should use to see the differences?

terraform fmt -diff


85. You are formatting the configuration files and what is the flag you should use to process the subdirectories as well?

terraform fmt -recursive


86. You are formatting configuration files in a lot of directories and you don’t want to see the list of file changes. What is the flag that you should use?

terraform fmt -list=false


88. What is the command usage?

terraform taint [options] address

The address argument is the address of the resource to mark as tainted.


89. When you are tainting a resource terraform reads the default state file terraform.tfstate. What is the flag you should use to read from a different path?

terraform taint -state=path


90. Give an example of tainting a single resource?

terraform taint aws_security_group.allow_all

The resource aws_security_group.allow_all in the module root has been marked as tainted.


91. Give an example of tainting a resource within a module?

terraform taint "module.couchbase.aws_instance.cb_node[9]"

Resource instance module.couchbase.aws_instance.cb_node[9] has been marked as tainted.


93. What is the command import usage?

terraform import [options] ADDRESS ID



94. What is the default workspace name?

default


96. What is the command to list the workspaces?

terraform workspace list




97. What is the command to create a new workspace?

terraform workspace new <name>



98. What is the command to show the current workspace?

terraform workspace show


99. What is the command to switch the workspace?

terraform workspace select <workspace name>



100. What is the command to delete the workspace?

terraform workspace delete <workspace name>



101. Can you delete the default workspace?

No. You can't ever delete default workspace


102. You are working on the different workspaces and you want to use a different number of instances based on the workspace. How do you achieve that?

resource "aws_instance" "example" {

  count = "${terraform.workspace == "default" ? 5 : 1}"

  # ... other arguments

}


103. You are working on the different workspaces and you want to use tags based on the workspace. How do you achieve that?

resource "aws_instance" "example" {

  tags = {

    Name = "web - ${terraform.workspace}"

  }

  # ... other arguments

}


106. What is the command usage?

terraform state <subcommand> [options] [args]


107. You are working on terraform files and you want to list all the resources. What is the command you should use?

terraform state list



108. How do you list the resources for the given name?

terraform state list <resource name>



109. What is the command that shows the attributes of a single resource in the state file?

terraform state show 'resource name'



110. How do you do debugging terraform?

Terraform has detailed logs that can be enabled by setting the TF_LOG environment variable to any value.

This will cause detailed logs to appear on stderr.

You can set TF_LOG to one of the log levels TRACE, DEBUG, INFO, WARN or ERROR to change the verbosity of the logs. TRACE is the most verbose and it is the default if TF_LOG is set to something other than a log level name.

To persist logged output you can set TF_LOG_PATH in order to force the log to always be appended to a specific file when logging is enabled.

Note that even when TF_LOG_PATH is set, TF_LOG must be set in order for any logging to be enabled.



111. If terraform crashes where should you see the logs?

crash.log

If Terraform ever crashes (a "panic" in the Go runtime), it saves a log file with the debug logs from the session as well as the panic message and backtrace to crash.log.


112. What is the first thing you should do when the terraform crashes?

panic message

The most interesting part of a crash log is the panic message itself and the backtrace immediately following. So the first thing to do is to search the file for panic


114. What is the difference between directory-separated and workspace-separated environments?

Directory separated environments rely on duplicate Terraform code, which may be useful if your deployments need differ, for example to test infrastructure changes in development. But they can run the risk of creating drift between the environments over time.

Workspace-separated environments use the same Terraform code but have different state files, which is useful if you want your environments to stay as similar to each other as possible, for example if you are providing development infrastructure to a team that wants to simulate running in production.


115. What is the command to pull the remote state?

terraform state pull

This command will download the state from its current location and output the raw format to stdout.



116. What is the command is used manually to upload a local state file to a remote state

terraform state push

The terraform state push command is used to manually upload a local state file to remote state. This command also works with local state.



119. When you are working with the workspaces how do you access the current workspace in the configuration files?

${terraform.workspace}



120. When you are using workspaces where does the Terraform save the state file for the local state?

terraform.tfstate.d

For local state, Terraform stores the workspace states in a directory called terraform.tfstate.d




122. How do you remove items from the Terraform state?

terraform state rm 'packet_device.worker'

The terraform state rm command is used to remove items from the Terraform state. This command can remove single resources, single instances of a resource, entire modules, and more.



123. How do you move the state from one source to another?

terraform state mv 'module.app' 'module.parent.module.app'

The terraform state mv command is used to move items in a Terraform state. This command can move single resources, single instances of a resource, entire modules, and more. This command can also move items to a completely different state file, enabling efficient refactoring.



24. How do you rename a resource in the terraform state file?

terraform state mv 'packet_device.worker' 'packet_device.helper'

The above example renames the packet_device resource named worker to helper.



128. What is the syntax for referencing a registry module?

<NAMESPACE>/<NAME>/<PROVIDER>

// for example

module "consul" {

  source = "hashicorp/consul/aws"

  version = "0.1.0"

}



129. What is the syntax for referencing a private registry module?

<HOSTNAME>/<NAMESPACE>/<NAME>/<PROVIDER>

// for example

module "vpc" {

  source = "app.terraform.io/example_corp/vpc/aws"

  version = "0.9.3"

}


139. How do you access output variables from the modules?

module.<MODULE NAME>.<OUTPUT NAME>


144. When you use remote modules what should you do if there is a change in the module?

When installing a remote module, Terraform will download it into the .terraform/modules directory in your configuration's root directory.

You should initialize with terraform init


146. When using a new module for the first time, you must run either terraform init or terraform get to install the module. Is this true?

True



153. What is the flag you should use to upgrade modules and plugins a part of their respective installation steps?

upgrade

terraform init -upgrade


154. When you are doing initialization with terraform init, you want to skip backend initialization. What should you do?

terraform init -backend=false


155. When you are doing initialization with terraform init, you want to skip child module installation. What should you do?

terraform init -get=false


156. When you are doing initialization with terraform init, you want to skip plugin installation. What should you do?

terraform init -get-plugins=false

Skips plugin installation. Terraform will use plugins installed in the user plugins directory, and any plugins already installed for the current working directory. If the installed plugins aren't sufficient for the configuration, init fails.


160. You are applying the infrastructure with the command apply and you don’t want to do interactive approval. Which flag should you use?

terraform apply -auto-approve


162. How do you preview the behavior of the command terraform destroy?

terraform plan -destroy


166. How do you save the execution plan?

terraform plan -out=tfplan

you can use that file with apply

terraform apply tfplan


167. You have started writing terraform configuration and you are using some sample configuration as a basis. How do you copy the example configuration into your working directory?

terraform init -from-module=MODULE-SOURCE



168. What is the flag you should use with the terraform plan to get detailed on the exit codes?

terraform plan -detailed-exitcode

Return a detailed exit code when the command exits. When provided, this argument changes the exit codes and their meanings to provide more granular information about what the resulting plan contains:

* 0 = Succeeded with empty diff (no changes)

* 1 = Error

* 2 = Succeeded with non-empty diff (changes present)


169. How do you target only specific resources when you run a terraform plan?

-target=resource - A Resource Address to target. This flag can be used multiple times.



170. How do you update the state prior to checking differences when you run a terraform plan?

terraform plan -refresh=true


171. The behavior of any terraform destroy command can be previewed at any time with an equivalent terraform plan -destroy command. Is this true?

True


173. What are Backends?

A "backend" in Terraform determines how the state is loaded and how an operation such as apply is executed. This abstraction enables non-local file state storage, remote execution, etc.

By default, Terraform uses the "local" backend, which is the normal behavior of Terraform.


174. What is local Backend?

The local backend stores state on the local filesystem locks that state using system APIs and performs operations locally.

// Example

terraform {

  backend "local" {

    path = "relative/path/to/terraform.tfstate"

  }

}


175. What is the default path for the local backend?

This defaults to "terraform.tfstate" relative to the root module by default.


177. Does Terraform continue if state locking fails?

No.

If state locking fails, Terraform will not continue.


178. Can you disable state locking?

Yes.

You can disable state locking for most commands with the -lock flag but it is not recommended.


179. What are the types of Backend?

Standard: State management, functionality covered in State Storage & Locking

Enhanced: Everything in standard plus remote operations.



180. What are remote Backends?

Remote backends allow Terraform to use a shared storage space for state data, so any member of your team can use Terraform to manage the same infrastructure.



187. What are the ways to provide remaining arguments when using partial configuration?

Interactively: Terraform will interactively ask you for the required values unless interactive input is disabled. Terraform will not prompt for optional values.

File: A configuration file may be specified via the init command line. To specify a file, use the -backend-config=PATH option when running terraform init. If the file contains secrets it may be kept in a secure data store, such as Vault, in which case it must be downloaded to the local disk before running Terraform.

Command-line key/value pairs: Key/value pairs can be specified via the init command line. Note that many shells retain command-line flags in a history file, so this isn't recommended for secrets. To specify a single key/value pair, use the -backend-config="KEY=VALUE" option when running terraform init.


189. Give an example of passing partial configuration with Command-line Key/Value pairs?

terraform init \

    -backend-config="address=demo.consul.io" \

    -backend-config="path=example_app/terraform_state" \

    -backend-config="scheme=https"


195. You should only use force unlock command when automatic unlocking fails. Is this true?

True


198. How many ways you can assign variables in the configuration?

Command-line flags

terraform apply -var 'region=us-east-1'



From a file

To persist variable values, create a file and assign variables within this file. Create a file named terraform.tfvars with the following contents:region = "us-east-1"terraform apply \

  -var-file="secret.tfvars" \

  -var-file="production.tfvars"



From environment variables

Terraform will read environment variables in the form of TF_VAR_name to find the value for a variable. For example, the TF_VAR_region variable can be set in the shell to set the region variable in Terraform.



UI input

If you execute terraform apply with any variable unspecified, Terraform will ask you to input the values interactively. These values are not saved, but this provides a convenient workflow when getting started with Terraform. UI input is not recommended for everyday use of Terraform.



199. Does environment variables support List and map types?

No

Environment variables can only populate string-type variables. List and map type variables must be populated via one of the other mechanisms.


200. How do you provision infrastructure in a staging environment or a production environment using the same Terraform configuration?

You can use different varible files with the same configuration

// Example//

For development

terraform apply -var-file="dev.tfvars"//

For test

terraform apply -var-file="test.tfvars"


204. Does Terraform language support user-defined functions?

No

The Terraform language does not support user-defined functions, and so only the functions built in to the language are available for use.


214. What is Run Triggers?

Terraform Cloud’s run triggers allow you to link workspaces so that a successful apply in a source workspace will queue a run in the workspace linked to it with a run trigger.

For example, adding new subnets to your network configuration could trigger an update to your application configuration to rebalance servers across the new subnets.


